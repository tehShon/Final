AWSTemplateFormatVersion: '2010-09-09'
Description: >
  TechSavvy Solutions â€“ HA, scalable 3-tier on AWS:
  VPC (public/private), ALB, Web & App ASGs, RDS Multi-AZ, SGs, IAM. CFN YAML.

Parameters:
  ProjectName:
    Type: String
    Default: techsavvy
    Description: Prefix for naming AWS resources
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
  AppSubnet1Cidr:
    Type: String
    Default: 10.0.10.0/24
  AppSubnet2Cidr:
    Type: String
    Default: 10.0.11.0/24
  DbSubnet1Cidr:
    Type: String
    Default: 10.0.20.0/24
  DbSubnet2Cidr:
    Type: String
    Default: 10.0.21.0/24
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 KeyPair name for SSH
  WebInstanceType:
    Type: String
    Default: t3.micro
  AppInstanceType:
    Type: String
    Default: t3.micro
  DesiredCapacityWeb:
    Type: Number
    Default: 2
  MaxCapacityWeb:
    Type: Number
    Default: 4
  DesiredCapacityApp:
    Type: Number
    Default: 2
  MaxCapacityApp:
    Type: Number
    Default: 4
  DBEngine:
    Type: String
    AllowedValues: [mysql, postgres]
    Default: mysql
  DBEngineVersion:
    Type: String
    Default: '8.0'   # For MySQL. If postgres, e.g. 15.4
  DBInstanceClass:
    Type: String
    Default: db.t3.micro
  DBAllocatedStorage:
    Type: Number
    Default: 20
    MinValue: 20
  DBName:
    Type: String
    Default: appdb
  DBMasterUsername:
    Type: String
    Default: masteruser
  DBMasterPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Strong password for the DB master user
  ALBListenerPort:
    Type: Number
    Default: 80
  AmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    Description: Latest Amazon Linux 2023 AMI from SSM

Conditions:
  IsPostgres: !Equals [!Ref DBEngine, 'postgres']

Resources:
  # -------------------- VPC --------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags: [{ Key: Name, Value: !Sub '${ProjectName}-vpc' }]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags: [{ Key: Name, Value: !Sub '${ProjectName}-igw' }]

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # -------------------- Subnets --------------------
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true

  AppSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref AppSubnet1Cidr
      MapPublicIpOnLaunch: false

  AppSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref AppSubnet2Cidr
      MapPublicIpOnLaunch: false

  DbSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: !Ref DbSubnet1Cidr
      MapPublicIpOnLaunch: false

  DbSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref DbSubnet2Cidr
      MapPublicIpOnLaunch: false

  # -------------------- Route Tables --------------------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicRtAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicRtAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  NatEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEip.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateAppRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateAppRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateAppRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  AppRtAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateAppRouteTable
      SubnetId: !Ref AppSubnet1

  AppRtAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateAppRouteTable
      SubnetId: !Ref AppSubnet2

  PrivateDbRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateDbRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateDbRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  DbRtAssoc1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateDbRouteTable
      SubnetId: !Ref DbSubnet1

  DbRtAssoc2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateDbRouteTable
      SubnetId: !Ref DbSubnet2

  # -------------------- IAM --------------------
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref InstanceRole]

  # -------------------- Security Groups --------------------
  AlbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: ALB SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ALBListenerPort
          ToPort: !Ref ALBListenerPort
          CidrIp: 0.0.0.0/0

  WebSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Web tier SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref AlbSG

  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: App tier SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref WebSG

  DbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: DB tier SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSG

  # -------------------- ALB --------------------
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups: [!Ref AlbSG]
      Subnets: [!Ref PublicSubnet1, !Ref PublicSubnet2]

  WebTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance
      HealthCheckPath: /
      Matcher: { HttpCode: '200-399' }

  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: !Ref ALBListenerPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebTargetGroup

  # -------------------- Launch Templates --------------------
  WebLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref WebInstanceType
        IamInstanceProfile: { Arn: !GetAtt InstanceProfile.Arn }
        KeyName: !Ref KeyName
        SecurityGroupIds: [!Ref WebSG]
        UserData: !Base64 |
          #cloud-config
          package_update: true
          packages:
            - nginx
          runcmd:
            - echo "Welcome to TechSavvy Web Tier - $(hostname)" > /usr/share/nginx/html/index.html
            - systemctl enable nginx
            - systemctl start nginx

  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref AppInstanceType
        IamInstanceProfile: { Arn: !GetAtt InstanceProfile.Arn }
        KeyName: !Ref KeyName
        SecurityGroupIds: [!Ref AppSG]
        UserData: !Base64 |
          #!/bin/bash
          dnf -y update
          dnf -y install python3
          cat >/opt/app.py <<'PY'
          from http.server import BaseHTTPRequestHandler, HTTPServer
          class H(BaseHTTPRequestHandler):
              def do_GET(self):
                  self.send_response(200)
                  self.send_header('Content-type','text/plain')
                  self.end_headers()
                  self.wfile.write(b"Hello from TechSavvy App Tier!\\n")
          HTTPServer(('',8080), H).serve_forever()
          PY
          nohup python3 /opt/app.py >/var/log/app.log 2>&1 &

  # -------------------- Auto Scaling --------------------
  WebASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref PublicSubnet1, !Ref PublicSubnet2]
      LaunchTemplate:
        LaunchTemplateId: !Ref WebLaunchTemplate
        Version: !GetAtt WebLaunchTemplate.LatestVersionNumber
      MinSize: 1
      DesiredCapacity: !Ref DesiredCapacityWeb
      MaxSize: !Ref MaxCapacityWeb
      TargetGroupARNs: [!Ref WebTargetGroup]

  AppASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref AppSubnet1, !Ref AppSubnet2]
      LaunchTemplate:
        LaunchTemplateId: !Ref AppLaunchTemplate
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
      MinSize: 1
      DesiredCapacity: !Ref DesiredCapacityApp
      MaxSize: !Ref MaxCapacityApp

  # -------------------- RDS --------------------
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub '${ProjectName} DB subnets'
      SubnetIds: [!Ref DbSubnet1, !Ref DbSubnet2]

  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      Engine: !Ref DBEngine
      EngineVersion: !Ref DBEngineVersion
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      MultiAZ: true
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterPassword
      DBName: !Ref DBName
      VPCSecurityGroups: [!Ref DbSG]
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      BackupRetentionPeriod: 7

Outputs:
  LoadBalancerDNSName:
    Description: Public URL of the application
    Value: !GetAtt ALB.DNSName
  DBEndpoint:
    Description: RDS writer endpoint
    Value: !GetAtt DBInstance.Endpoint.Address
